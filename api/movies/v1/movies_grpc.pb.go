// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/movies/v1/movies.proto

package moviesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MoviesWriterService_CreateMovie_FullMethodName   = "/api.movies.v1.MoviesWriterService/CreateMovie"
	MoviesWriterService_DeleteMovie_FullMethodName   = "/api.movies.v1.MoviesWriterService/DeleteMovie"
	MoviesWriterService_UndeleteMovie_FullMethodName = "/api.movies.v1.MoviesWriterService/UndeleteMovie"
	MoviesWriterService_UpdateMovie_FullMethodName   = "/api.movies.v1.MoviesWriterService/UpdateMovie"
)

// MoviesWriterServiceClient is the client API for MoviesWriterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesWriterServiceClient interface {
	// CreateMovie creates a Movie.
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	UndeleteMovie(ctx context.Context, in *UndeleteMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error)
}

type moviesWriterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesWriterServiceClient(cc grpc.ClientConnInterface) MoviesWriterServiceClient {
	return &moviesWriterServiceClient{cc}
}

func (c *moviesWriterServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MoviesWriterService_CreateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesWriterServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MoviesWriterService_DeleteMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesWriterServiceClient) UndeleteMovie(ctx context.Context, in *UndeleteMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MoviesWriterService_UndeleteMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesWriterServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MoviesWriterService_UpdateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesWriterServiceServer is the server API for MoviesWriterService service.
// All implementations must embed UnimplementedMoviesWriterServiceServer
// for forward compatibility
type MoviesWriterServiceServer interface {
	// CreateMovie creates a Movie.
	CreateMovie(context.Context, *CreateMovieRequest) (*Movie, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*Movie, error)
	UndeleteMovie(context.Context, *UndeleteMovieRequest) (*Movie, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error)
	mustEmbedUnimplementedMoviesWriterServiceServer()
}

// UnimplementedMoviesWriterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoviesWriterServiceServer struct {
}

func (UnimplementedMoviesWriterServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMoviesWriterServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMoviesWriterServiceServer) UndeleteMovie(context.Context, *UndeleteMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteMovie not implemented")
}
func (UnimplementedMoviesWriterServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMoviesWriterServiceServer) mustEmbedUnimplementedMoviesWriterServiceServer() {}

// UnsafeMoviesWriterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesWriterServiceServer will
// result in compilation errors.
type UnsafeMoviesWriterServiceServer interface {
	mustEmbedUnimplementedMoviesWriterServiceServer()
}

func RegisterMoviesWriterServiceServer(s grpc.ServiceRegistrar, srv MoviesWriterServiceServer) {
	s.RegisterService(&MoviesWriterService_ServiceDesc, srv)
}

func _MoviesWriterService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesWriterServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesWriterService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesWriterServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesWriterService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesWriterServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesWriterService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesWriterServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesWriterService_UndeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesWriterServiceServer).UndeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesWriterService_UndeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesWriterServiceServer).UndeleteMovie(ctx, req.(*UndeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesWriterService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesWriterServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesWriterService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesWriterServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesWriterService_ServiceDesc is the grpc.ServiceDesc for MoviesWriterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesWriterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.movies.v1.MoviesWriterService",
	HandlerType: (*MoviesWriterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _MoviesWriterService_CreateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MoviesWriterService_DeleteMovie_Handler,
		},
		{
			MethodName: "UndeleteMovie",
			Handler:    _MoviesWriterService_UndeleteMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MoviesWriterService_UpdateMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/movies/v1/movies.proto",
}

const (
	MoviesReaderService_GetMovie_FullMethodName   = "/api.movies.v1.MoviesReaderService/GetMovie"
	MoviesReaderService_ListMovies_FullMethodName = "/api.movies.v1.MoviesReaderService/ListMovies"
)

// MoviesReaderServiceClient is the client API for MoviesReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesReaderServiceClient interface {
	// GetMovie returns a Movie.
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	// ListMovies returns a list of Movies.
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
}

type moviesReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesReaderServiceClient(cc grpc.ClientConnInterface) MoviesReaderServiceClient {
	return &moviesReaderServiceClient{cc}
}

func (c *moviesReaderServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, MoviesReaderService_GetMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesReaderServiceClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, MoviesReaderService_ListMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesReaderServiceServer is the server API for MoviesReaderService service.
// All implementations must embed UnimplementedMoviesReaderServiceServer
// for forward compatibility
type MoviesReaderServiceServer interface {
	// GetMovie returns a Movie.
	GetMovie(context.Context, *GetMovieRequest) (*Movie, error)
	// ListMovies returns a list of Movies.
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	mustEmbedUnimplementedMoviesReaderServiceServer()
}

// UnimplementedMoviesReaderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoviesReaderServiceServer struct {
}

func (UnimplementedMoviesReaderServiceServer) GetMovie(context.Context, *GetMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMoviesReaderServiceServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMoviesReaderServiceServer) mustEmbedUnimplementedMoviesReaderServiceServer() {}

// UnsafeMoviesReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesReaderServiceServer will
// result in compilation errors.
type UnsafeMoviesReaderServiceServer interface {
	mustEmbedUnimplementedMoviesReaderServiceServer()
}

func RegisterMoviesReaderServiceServer(s grpc.ServiceRegistrar, srv MoviesReaderServiceServer) {
	s.RegisterService(&MoviesReaderService_ServiceDesc, srv)
}

func _MoviesReaderService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesReaderServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesReaderService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesReaderServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesReaderService_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesReaderServiceServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesReaderService_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesReaderServiceServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesReaderService_ServiceDesc is the grpc.ServiceDesc for MoviesReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.movies.v1.MoviesReaderService",
	HandlerType: (*MoviesReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MoviesReaderService_GetMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _MoviesReaderService_ListMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/movies/v1/movies.proto",
}
